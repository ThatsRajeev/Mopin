"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Cashfree Payment Gateway APIs
 * Cashfree\'s Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.
 *
 * The version of the OpenAPI document: 2023-08-01
 * Contact: developers@cashfree.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cashfree = exports.PGWebhookEvent = exports.PGCustomerFetchInstrumentsInstrumentTypeEnum = exports.UpiChannelEnum = exports.RefundEntityRefundModeEnum = exports.RefundEntityRefundTypeEnum = exports.RefundEntityRefundStatusEnum = exports.RefundEntityEntityEnum = exports.RateLimitErrorTypeEnum = exports.PaymentEntityPaymentStatusEnum = exports.PaylaterProviderEnum = exports.PayOrderEntityActionEnum = exports.PayOrderEntityChannelEnum = exports.PayOrderEntityPaymentMethodEnum = exports.OrderCreateRefundRequestRefundSpeedEnum = exports.OrderAuthenticatePaymentRequestActionEnum = exports.OrderAuthenticateEntityAuthenticateStatusEnum = exports.OrderAuthenticateEntityActionEnum = exports.OfferType = exports.OfferTncOfferTncTypeEnum = exports.OfferDetailsOfferTypeEnum = exports.InstrumentEntityInstrumentStatusEnum = exports.InstrumentEntityInstrumentTypeEnum = exports.IdempotencyErrorTypeEnum = exports.DiscountDetailsDiscountTypeEnum = exports.CashbackDetailsCashbackTypeEnum = exports.CardlessEMIProviderEnum = exports.CardEMICardBankNameEnum = exports.CardCardBankNameEnum = exports.CardTokenTypeEnum = exports.CardChannelEnum = exports.BadRequestErrorTypeEnum = exports.AuthorizeOrderRequestActionEnum = exports.AuthorizationInPaymentsEntityStatusEnum = exports.AuthorizationInPaymentsEntityActionEnum = exports.AppProviderEnum = exports.ApiError502TypeEnum = exports.ApiError409TypeEnum = exports.ApiError404TypeEnum = exports.ApiErrorTypeEnum = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
const configuration_1 = require("./configuration");
const Sentry = require("@sentry/node");
const crypto = require("crypto");
exports.ApiErrorTypeEnum = {
    API_ERROR: 'api_error',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.ApiError404TypeEnum = {
    INVALID_REQUEST_ERROR: 'invalid_request_error',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.ApiError409TypeEnum = {
    INVALID_REQUEST_ERROR: 'invalid_request_error',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.ApiError502TypeEnum = {
    API_ERROR: 'api_error',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.AppProviderEnum = {
    GPAY: 'gpay',
    PHONEPE: 'phonepe',
    OLA: 'ola',
    PAYTM: 'paytm',
    AMAZON: 'amazon',
    AIRTEL: 'airtel',
    FREECHARGE: 'freecharge',
    MOBIKWIK: 'mobikwik',
    JIO: 'jio',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.AuthorizationInPaymentsEntityActionEnum = {
    CAPTURE: 'CAPTURE',
    VOID: 'VOID',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.AuthorizationInPaymentsEntityStatusEnum = {
    SUCCESS: 'SUCCESS',
    PENDING: 'PENDING',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.AuthorizeOrderRequestActionEnum = {
    CAPTURE: 'CAPTURE',
    VOID: 'VOID',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.BadRequestErrorTypeEnum = {
    INVALID_REQUEST_ERROR: 'invalid_request_error',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.CardChannelEnum = {
    LINK: 'link',
    POST: 'post',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.CardTokenTypeEnum = {
    ISSUER_TOKEN: 'ISSUER_TOKEN',
    NETWORK_GC_TOKEN: 'NETWORK_GC_TOKEN',
    ISSUER_GC_TOKEN: 'ISSUER_GC_TOKEN',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.CardCardBankNameEnum = {
    KOTAK: 'Kotak',
    ICICI: 'ICICI',
    RBL: 'RBL',
    BOB: 'BOB',
    STANDARD_CHARTERED: 'Standard Chartered',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.CardEMICardBankNameEnum = {
    HDFC: 'hdfc',
    KOTAK: 'kotak',
    ICICI: 'icici',
    RBL: 'rbl',
    BOB: 'bob',
    STANDARD_CHARTERED: 'standard chartered',
    AXIS: 'axis',
    AU: 'au',
    YES: 'yes',
    SBI: 'sbi',
    FED: 'fed',
    HSBC: 'hsbc',
    CITI: 'citi',
    AMEX: 'amex',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.CardlessEMIProviderEnum = {
    FLEXMONEY: 'flexmoney',
    ZESTMONEY: 'zestmoney',
    HDFC: 'hdfc',
    ICICI: 'icici',
    CASHE: 'cashe',
    IDFC: 'idfc',
    KOTAK: 'kotak',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.CashbackDetailsCashbackTypeEnum = {
    FLAT: 'flat',
    PERCENTAGE: 'percentage',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.DiscountDetailsDiscountTypeEnum = {
    FLAT: 'flat',
    PERCENTAGE: 'percentage',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.IdempotencyErrorTypeEnum = {
    IDEMPOTENCY_ERROR: 'idempotency_error',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.InstrumentEntityInstrumentTypeEnum = {
    CARD: 'card',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.InstrumentEntityInstrumentStatusEnum = {
    ACTIVE: 'ACTIVE',
    INACTIVE: 'INACTIVE',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.OfferDetailsOfferTypeEnum = {
    DISCOUNT: 'DISCOUNT',
    CASHBACK: 'CASHBACK',
    DISCOUNT_AND_CASHBACK: 'DISCOUNT_AND_CASHBACK',
    NO_COST_EMI: 'NO_COST_EMI',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.OfferTncOfferTncTypeEnum = {
    TEXT: 'text',
    LINK: 'link',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
/**
 * Offer Type Object
 * @export
 * @enum {string}
 */
exports.OfferType = {
    DISCOUNT: 'DISCOUNT',
    CASHBACK: 'CASHBACK',
    DISCOUNT_AND_CASHBACK: 'DISCOUNT_AND_CASHBACK',
    NO_COST_EMI: 'NO_COST_EMI',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.OrderAuthenticateEntityActionEnum = {
    SUBMIT_OTP: 'SUBMIT_OTP',
    RESEND_OTP: 'RESEND_OTP',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.OrderAuthenticateEntityAuthenticateStatusEnum = {
    FAILED: 'FAILED',
    SUCCESS: 'SUCCESS',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.OrderAuthenticatePaymentRequestActionEnum = {
    SUBMIT_OTP: 'SUBMIT_OTP',
    RESEND_OTP: 'RESEND_OTP',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.OrderCreateRefundRequestRefundSpeedEnum = {
    STANDARD: 'STANDARD',
    INSTANT: 'INSTANT',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.PayOrderEntityPaymentMethodEnum = {
    NETBANKING: 'netbanking',
    CARD: 'card',
    UPI: 'upi',
    APP: 'app',
    CARDLESS_EMI: 'cardless_emi',
    PAYLATER: 'paylater',
    BANKTRANSFER: 'banktransfer',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.PayOrderEntityChannelEnum = {
    LINK: 'link',
    COLLECT: 'collect',
    QRCODE: 'qrcode',
    POST: 'post',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.PayOrderEntityActionEnum = {
    LINK: 'link',
    CUSTOM: 'custom',
    FORM: 'form',
    POST: 'post',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.PaylaterProviderEnum = {
    KOTAK: 'kotak',
    FLEXIPAY: 'flexipay',
    ZESTMONEY: 'zestmoney',
    LAZYPAY: 'lazypay',
    OLAPOSTPAID: 'olapostpaid',
    SIMPL: 'simpl',
    FREECHARGEPAYLATER: 'freechargepaylater',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.PaymentEntityPaymentStatusEnum = {
    SUCCESS: 'SUCCESS',
    NOT_ATTEMPTED: 'NOT_ATTEMPTED',
    FAILED: 'FAILED',
    USER_DROPPED: 'USER_DROPPED',
    VOID: 'VOID',
    CANCELLED: 'CANCELLED',
    PENDING: 'PENDING',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.RateLimitErrorTypeEnum = {
    RATE_LIMIT_ERROR: 'rate_limit_error',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.RefundEntityEntityEnum = {
    REFUND: 'refund',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.RefundEntityRefundStatusEnum = {
    SUCCESS: 'SUCCESS',
    PENDING: 'PENDING',
    CANCELLED: 'CANCELLED',
    ONHOLD: 'ONHOLD',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.RefundEntityRefundTypeEnum = {
    PAYMENT_AUTO_REFUND: 'PAYMENT_AUTO_REFUND',
    MERCHANT_INITIATED: 'MERCHANT_INITIATED',
    UNRECONCILED_AUTO_REFUND: 'UNRECONCILED_AUTO_REFUND',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.RefundEntityRefundModeEnum = {
    STANDARD: 'STANDARD',
    INSTANT: 'INSTANT',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
exports.UpiChannelEnum = {
    LINK: 'link',
    COLLECT: 'collect',
    QRCODE: 'qrcode',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
/**
 * CustomersApi - axios parameter creator
 * @export
 */
const CustomersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Create Customer at Cashfree
         * @summary Create Customer at Cashfree
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateCustomerRequest} CreateCustomerRequest Request to create a new customer at Cashfree
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGCreateCustomer: (x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGCreateCustomer', 'x_api_version', x_api_version);
            // verify required parameter 'CreateCustomerRequest' is not null or undefined
            (0, common_1.assertParamExists)('pGCreateCustomer', 'CreateCustomerRequest', CreateCustomerRequest);
            const localVarPath = `/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(CreateCustomerRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * CustomersApi - functional programming interface
 * @export
 */
const CustomersApiFp = function (configuration) {
    const localVarAxiosParamCreator = CustomersApiAxiosParamCreator(configuration);
    return {
        /**
         * Create Customer at Cashfree
         * @summary Create Customer at Cashfree
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateCustomerRequest} CreateCustomerRequest Request to create a new customer at Cashfree
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGCreateCustomer(x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCreateCustomer(x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
    };
};
/**
 * CustomersApi - object-oriented interface
 * @export
 * @class CustomersApi
 * @extends {BaseAPI}
 */
/**
 * EligibilityApi - axios parameter creator
 * @export
 */
const EligibilityApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to get eligible Cardless EMI Payment Methods available for a customer on an order basis their phone number.
         * @summary Get Eligible Cardless EMI Payment Methods for a customer on an order
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {EligibilityFetchCardlessEMIRequest} EligibilityFetchCardlessEMIRequest Request Body to get eligible cardless emi options for a customer and order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGEligibilityFetchCardlessEMI: (x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGEligibilityFetchCardlessEMI', 'x_api_version', x_api_version);
            // verify required parameter 'EligibilityFetchCardlessEMIRequest' is not null or undefined
            (0, common_1.assertParamExists)('pGEligibilityFetchCardlessEMI', 'EligibilityFetchCardlessEMIRequest', EligibilityFetchCardlessEMIRequest);
            const localVarPath = `/eligibility/cardlessemi`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(EligibilityFetchCardlessEMIRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to get eligible offers for an order_id or order amount.
         * @summary Get Eligible Offers for an Order
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {EligibilityFetchOffersRequest} EligibilityFetchOffersRequest Request Body to get eligible offers for a customer and order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGEligibilityFetchOffers: (x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGEligibilityFetchOffers', 'x_api_version', x_api_version);
            // verify required parameter 'EligibilityFetchOffersRequest' is not null or undefined
            (0, common_1.assertParamExists)('pGEligibilityFetchOffers', 'EligibilityFetchOffersRequest', EligibilityFetchOffersRequest);
            const localVarPath = `/eligibility/offers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(EligibilityFetchOffersRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to get eligible Paylater Payment Methods for a customer on an order.
         * @summary Get Eligible Paylater for a customer on an order
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {EligibilityFetchPaylaterRequest} EligibilityFetchPaylaterRequest Request Body to get eligible paylater options for a customer and order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGEligibilityFetchPaylater: (x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGEligibilityFetchPaylater', 'x_api_version', x_api_version);
            // verify required parameter 'EligibilityFetchPaylaterRequest' is not null or undefined
            (0, common_1.assertParamExists)('pGEligibilityFetchPaylater', 'EligibilityFetchPaylaterRequest', EligibilityFetchPaylaterRequest);
            const localVarPath = `/eligibility/paylater`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(EligibilityFetchPaylaterRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to get eligible Payment Methods
         * @summary Get eligible Payment Methods
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {EligibilityFetchPaymentMethodsRequest} EligibilityFetchPaymentMethodsRequest Request Body to get eligible payment methods for an account and order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGEligibilityFetchPaymentMethods: (x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGEligibilityFetchPaymentMethods', 'x_api_version', x_api_version);
            // verify required parameter 'EligibilityFetchPaymentMethodsRequest' is not null or undefined
            (0, common_1.assertParamExists)('pGEligibilityFetchPaymentMethods', 'EligibilityFetchPaymentMethodsRequest', EligibilityFetchPaymentMethodsRequest);
            const localVarPath = `/eligibility/payment_methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(EligibilityFetchPaymentMethodsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * EligibilityApi - functional programming interface
 * @export
 */
const EligibilityApiFp = function (configuration) {
    const localVarAxiosParamCreator = EligibilityApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to get eligible Cardless EMI Payment Methods available for a customer on an order basis their phone number.
         * @summary Get Eligible Cardless EMI Payment Methods for a customer on an order
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {EligibilityFetchCardlessEMIRequest} EligibilityFetchCardlessEMIRequest Request Body to get eligible cardless emi options for a customer and order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGEligibilityFetchCardlessEMI(x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGEligibilityFetchCardlessEMI(x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * Use this API to get eligible offers for an order_id or order amount.
         * @summary Get Eligible Offers for an Order
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {EligibilityFetchOffersRequest} EligibilityFetchOffersRequest Request Body to get eligible offers for a customer and order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGEligibilityFetchOffers(x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGEligibilityFetchOffers(x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * Use this API to get eligible Paylater Payment Methods for a customer on an order.
         * @summary Get Eligible Paylater for a customer on an order
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {EligibilityFetchPaylaterRequest} EligibilityFetchPaylaterRequest Request Body to get eligible paylater options for a customer and order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGEligibilityFetchPaylater(x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGEligibilityFetchPaylater(x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * Use this API to get eligible Payment Methods
         * @summary Get eligible Payment Methods
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {EligibilityFetchPaymentMethodsRequest} EligibilityFetchPaymentMethodsRequest Request Body to get eligible payment methods for an account and order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGEligibilityFetchPaymentMethods(x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGEligibilityFetchPaymentMethods(x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
    };
};
/**
 * EligibilityApi - object-oriented interface
 * @export
 * @class EligibilityApi
 * @extends {BaseAPI}
 */
/**
 * OffersApi - axios parameter creator
 * @export
 */
const OffersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to create offers with Cashfree from your backend
         * @summary Create Offer
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateOfferRequest} CreateOfferRequest Request body to create an offer at Cashfree
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGCreateOffer: (x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGCreateOffer', 'x_api_version', x_api_version);
            // verify required parameter 'CreateOfferRequest' is not null or undefined
            (0, common_1.assertParamExists)('pGCreateOffer', 'CreateOfferRequest', CreateOfferRequest);
            const localVarPath = `/offers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(CreateOfferRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to get offer by offer_id
         * @summary Get Offer by ID
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} offer_id The offer ID for which you want to view the offer details.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGFetchOffer: (x_api_version, offer_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGFetchOffer', 'x_api_version', x_api_version);
            // verify required parameter 'offer_id' is not null or undefined
            (0, common_1.assertParamExists)('pGFetchOffer', 'offer_id', offer_id);
            const localVarPath = `/offers/{offer_id}`
                .replace(`{${"offer_id"}}`, encodeURIComponent(String(offer_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * OffersApi - functional programming interface
 * @export
 */
const OffersApiFp = function (configuration) {
    const localVarAxiosParamCreator = OffersApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to create offers with Cashfree from your backend
         * @summary Create Offer
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateOfferRequest} CreateOfferRequest Request body to create an offer at Cashfree
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGCreateOffer(x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCreateOffer(x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * Use this API to get offer by offer_id
         * @summary Get Offer by ID
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} offer_id The offer ID for which you want to view the offer details.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGFetchOffer(x_api_version, offer_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchOffer(x_api_version, offer_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
    };
};
/**
 * OffersApi - object-oriented interface
 * @export
 * @class OffersApi
 * @extends {BaseAPI}
 */
/**
 * OrdersApi - axios parameter creator
 * @export
 */
const OrdersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * ### Order An order is an entity which has a amount and currency associated with it. It is something for which you want to collect payment for. Use this API to create orders with Cashfree from your backend to get a `payment_sessions_id`.  You can use the `payment_sessions_id` to create a transaction for the order.
         * @summary Create Order
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateOrderRequest} CreateOrderRequest Request body to create an order at cashfree
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGCreateOrder: (x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGCreateOrder', 'x_api_version', x_api_version);
            // verify required parameter 'CreateOrderRequest' is not null or undefined
            (0, common_1.assertParamExists)('pGCreateOrder', 'CreateOrderRequest', CreateOrderRequest);
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(CreateOrderRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to fetch the order that was created at Cashfree\'s using the `order_id`.  ## When to use this API - To check the status of your order - Once the order is PAID - Once your customer returns to `return_url`
         * @summary Get Order
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGFetchOrder: (x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGFetchOrder', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            (0, common_1.assertParamExists)('pGFetchOrder', 'order_id', order_id);
            const localVarPath = `/orders/{order_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to terminate the order that was created at Cashfree\'s using the `order_id`.
         * @summary Terminate Order
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {TerminateOrderRequest} TerminateOrderRequest Request body to terminate an order at cashfree
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGTerminateOrder: (x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGTerminateOrder', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            (0, common_1.assertParamExists)('pGTerminateOrder', 'order_id', order_id);
            // verify required parameter 'TerminateOrderRequest' is not null or undefined
            (0, common_1.assertParamExists)('pGTerminateOrder', 'TerminateOrderRequest', TerminateOrderRequest);
            const localVarPath = `/orders/{order_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(TerminateOrderRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * OrdersApi - functional programming interface
 * @export
 */
const OrdersApiFp = function (configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration);
    return {
        /**
         * ### Order An order is an entity which has a amount and currency associated with it. It is something for which you want to collect payment for. Use this API to create orders with Cashfree from your backend to get a `payment_sessions_id`.  You can use the `payment_sessions_id` to create a transaction for the order.
         * @summary Create Order
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateOrderRequest} CreateOrderRequest Request body to create an order at cashfree
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGCreateOrder(x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCreateOrder(x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * Use this API to fetch the order that was created at Cashfree\'s using the `order_id`.  ## When to use this API - To check the status of your order - Once the order is PAID - Once your customer returns to `return_url`
         * @summary Get Order
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGFetchOrder(x_api_version, order_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchOrder(x_api_version, order_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * Use this API to terminate the order that was created at Cashfree\'s using the `order_id`.
         * @summary Terminate Order
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {TerminateOrderRequest} TerminateOrderRequest Request body to terminate an order at cashfree
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGTerminateOrder(x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGTerminateOrder(x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
    };
};
/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
/**
 * PGReconciliationApi - axios parameter creator
 * @export
 */
const PGReconciliationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * - Use this API to get the payment gateway reconciliation details with date range. - It will have events for your payment account
         * @summary PG Reconciliation
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {FetchReconRequest} FetchReconRequest Request Body for the reconciliation
         * @param {string} [Content_Type] application/json
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {string} [Accept] application/json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGFetchRecon: (x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGFetchRecon', 'x_api_version', x_api_version);
            // verify required parameter 'FetchReconRequest' is not null or undefined
            (0, common_1.assertParamExists)('pGFetchRecon', 'FetchReconRequest', FetchReconRequest);
            const localVarPath = `/recon`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(FetchReconRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PGReconciliationApi - functional programming interface
 * @export
 */
const PGReconciliationApiFp = function (configuration) {
    const localVarAxiosParamCreator = PGReconciliationApiAxiosParamCreator(configuration);
    return {
        /**
         * - Use this API to get the payment gateway reconciliation details with date range. - It will have events for your payment account
         * @summary PG Reconciliation
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {FetchReconRequest} FetchReconRequest Request Body for the reconciliation
         * @param {string} [Content_Type] application/json
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {string} [Accept] application/json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGFetchRecon(x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchRecon(x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
    };
};
/**
 * PGReconciliationApi - object-oriented interface
 * @export
 * @class PGReconciliationApi
 * @extends {BaseAPI}
 */
/**
 * PaymentLinksApi - axios parameter creator
 * @export
 */
const PaymentLinksApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to cancel a payment link. No further payments can be done against a cancelled link. Only a link in ACTIVE status can be cancelled.
         * @summary Cancel Payment Link
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} link_id The payment link ID for which you want to view the details.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGCancelLink: (x_api_version, link_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGCancelLink', 'x_api_version', x_api_version);
            // verify required parameter 'link_id' is not null or undefined
            (0, common_1.assertParamExists)('pGCancelLink', 'link_id', link_id);
            const localVarPath = `/links/{link_id}/cancel`
                .replace(`{${"link_id"}}`, encodeURIComponent(String(link_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to create a new payment link. The created payment link url will be available in the API response parameter link_url.
         * @summary Create Payment Link
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateLinkRequest} CreateLinkRequest Request Body to Create Payment Links
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGCreateLink: (x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGCreateLink', 'x_api_version', x_api_version);
            // verify required parameter 'CreateLinkRequest' is not null or undefined
            (0, common_1.assertParamExists)('pGCreateLink', 'CreateLinkRequest', CreateLinkRequest);
            const localVarPath = `/links`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(CreateLinkRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to view all details and status of a payment link.
         * @summary Fetch Payment Link Details
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} link_id The payment link ID for which you want to view the details.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGFetchLink: (x_api_version, link_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGFetchLink', 'x_api_version', x_api_version);
            // verify required parameter 'link_id' is not null or undefined
            (0, common_1.assertParamExists)('pGFetchLink', 'link_id', link_id);
            const localVarPath = `/links/{link_id}`
                .replace(`{${"link_id"}}`, encodeURIComponent(String(link_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to view all order details for a payment link.
         * @summary Get Orders for a Payment Link
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} link_id The payment link ID for which you want to view the details.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGLinkFetchOrders: (x_api_version, link_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGLinkFetchOrders', 'x_api_version', x_api_version);
            // verify required parameter 'link_id' is not null or undefined
            (0, common_1.assertParamExists)('pGLinkFetchOrders', 'link_id', link_id);
            const localVarPath = `/links/{link_id}/orders`
                .replace(`{${"link_id"}}`, encodeURIComponent(String(link_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PaymentLinksApi - functional programming interface
 * @export
 */
const PaymentLinksApiFp = function (configuration) {
    const localVarAxiosParamCreator = PaymentLinksApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to cancel a payment link. No further payments can be done against a cancelled link. Only a link in ACTIVE status can be cancelled.
         * @summary Cancel Payment Link
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} link_id The payment link ID for which you want to view the details.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGCancelLink(x_api_version, link_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCancelLink(x_api_version, link_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * Use this API to create a new payment link. The created payment link url will be available in the API response parameter link_url.
         * @summary Create Payment Link
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateLinkRequest} CreateLinkRequest Request Body to Create Payment Links
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGCreateLink(x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCreateLink(x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * Use this API to view all details and status of a payment link.
         * @summary Fetch Payment Link Details
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} link_id The payment link ID for which you want to view the details.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGFetchLink(x_api_version, link_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchLink(x_api_version, link_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * Use this API to view all order details for a payment link.
         * @summary Get Orders for a Payment Link
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} link_id The payment link ID for which you want to view the details.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGLinkFetchOrders(x_api_version, link_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGLinkFetchOrders(x_api_version, link_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
    };
};
/**
 * PaymentLinksApi - object-oriented interface
 * @export
 * @class PaymentLinksApi
 * @extends {BaseAPI}
 */
/**
 * PaymentsApi - axios parameter creator
 * @export
 */
const PaymentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to capture or void a preauthorized payment
         * @summary Preauthorization
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {AuthorizeOrderRequest} AuthorizeOrderRequest Request to Capture or Void Transactions
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGAuthorizeOrder: (x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGAuthorizeOrder', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            (0, common_1.assertParamExists)('pGAuthorizeOrder', 'order_id', order_id);
            // verify required parameter 'AuthorizeOrderRequest' is not null or undefined
            (0, common_1.assertParamExists)('pGAuthorizeOrder', 'AuthorizeOrderRequest', AuthorizeOrderRequest);
            const localVarPath = `/orders/{order_id}/authorization`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(AuthorizeOrderRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * If you accept OTP on your own page, you can use the below API to send OTP to Cashfree.
         * @summary Submit or Resend OTP
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} cf_payment_id The Cashfree payment or transaction ID.
         * @param {OrderAuthenticatePaymentRequest} OrderAuthenticatePaymentRequest Request body to submit/resend headless OTP. To use this API make sure you have headless OTP enabled for your account
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGOrderAuthenticatePayment: (x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGOrderAuthenticatePayment', 'x_api_version', x_api_version);
            // verify required parameter 'cf_payment_id' is not null or undefined
            (0, common_1.assertParamExists)('pGOrderAuthenticatePayment', 'cf_payment_id', cf_payment_id);
            // verify required parameter 'OrderAuthenticatePaymentRequest' is not null or undefined
            (0, common_1.assertParamExists)('pGOrderAuthenticatePayment', 'OrderAuthenticatePaymentRequest', OrderAuthenticatePaymentRequest);
            const localVarPath = `/orders/pay/authenticate/{cf_payment_id}`
                .replace(`{${"cf_payment_id"}}`, encodeURIComponent(String(cf_payment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(OrderAuthenticatePaymentRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to view payment details of an order for a payment ID.
         * @summary Get Payment by ID
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} cf_payment_id The Cashfree payment or transaction ID.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGOrderFetchPayment: (x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGOrderFetchPayment', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            (0, common_1.assertParamExists)('pGOrderFetchPayment', 'order_id', order_id);
            // verify required parameter 'cf_payment_id' is not null or undefined
            (0, common_1.assertParamExists)('pGOrderFetchPayment', 'cf_payment_id', cf_payment_id);
            const localVarPath = `/orders/{order_id}/payments/{cf_payment_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)))
                .replace(`{${"cf_payment_id"}}`, encodeURIComponent(String(cf_payment_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to view all payment details for an order.
         * @summary Get Payments for an Order
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGOrderFetchPayments: (x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGOrderFetchPayments', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            (0, common_1.assertParamExists)('pGOrderFetchPayments', 'order_id', order_id);
            const localVarPath = `/orders/{order_id}/payments`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API when you have already created the orders and want Cashfree to process the payment. To use this API S2S flag needs to be enabled from the backend. In case you want to use the cards payment option the PCI DSS flag is required, for more information send an email to \"care@cashfree.com\".
         * @summary Order Pay
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {PayOrderRequest} PayOrderRequest Request body to create a transaction at cashfree using &#x60;payment_session_id&#x60;
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGPayOrder: (x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGPayOrder', 'x_api_version', x_api_version);
            // verify required parameter 'PayOrderRequest' is not null or undefined
            (0, common_1.assertParamExists)('pGPayOrder', 'PayOrderRequest', PayOrderRequest);
            const localVarPath = `/orders/sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(PayOrderRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * PaymentsApi - functional programming interface
 * @export
 */
const PaymentsApiFp = function (configuration) {
    const localVarAxiosParamCreator = PaymentsApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to capture or void a preauthorized payment
         * @summary Preauthorization
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {AuthorizeOrderRequest} AuthorizeOrderRequest Request to Capture or Void Transactions
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGAuthorizeOrder(x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGAuthorizeOrder(x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * If you accept OTP on your own page, you can use the below API to send OTP to Cashfree.
         * @summary Submit or Resend OTP
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} cf_payment_id The Cashfree payment or transaction ID.
         * @param {OrderAuthenticatePaymentRequest} OrderAuthenticatePaymentRequest Request body to submit/resend headless OTP. To use this API make sure you have headless OTP enabled for your account
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGOrderAuthenticatePayment(x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderAuthenticatePayment(x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * Use this API to view payment details of an order for a payment ID.
         * @summary Get Payment by ID
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} cf_payment_id The Cashfree payment or transaction ID.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGOrderFetchPayment(x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchPayment(x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * Use this API to view all payment details for an order.
         * @summary Get Payments for an Order
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGOrderFetchPayments(x_api_version, order_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchPayments(x_api_version, order_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * Use this API when you have already created the orders and want Cashfree to process the payment. To use this API S2S flag needs to be enabled from the backend. In case you want to use the cards payment option the PCI DSS flag is required, for more information send an email to \"care@cashfree.com\".
         * @summary Order Pay
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {PayOrderRequest} PayOrderRequest Request body to create a transaction at cashfree using &#x60;payment_session_id&#x60;
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGPayOrder(x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGPayOrder(x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
    };
};
/**
 * PaymentsApi - object-oriented interface
 * @export
 * @class PaymentsApi
 * @extends {BaseAPI}
 */
/**
 * RefundsApi - axios parameter creator
 * @export
 */
const RefundsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to initiate refunds.
         * @summary Create Refund
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {OrderCreateRefundRequest} OrderCreateRefundRequest Request Body to Create Refunds
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGOrderCreateRefund: (x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGOrderCreateRefund', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            (0, common_1.assertParamExists)('pGOrderCreateRefund', 'order_id', order_id);
            // verify required parameter 'OrderCreateRefundRequest' is not null or undefined
            (0, common_1.assertParamExists)('pGOrderCreateRefund', 'OrderCreateRefundRequest', OrderCreateRefundRequest);
            const localVarPath = `/orders/{order_id}/refunds`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(OrderCreateRefundRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to fetch a specific refund processed on your Cashfree Account.
         * @summary Get Refund
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} refund_id Refund Id of the refund you want to fetch.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGOrderFetchRefund: (x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGOrderFetchRefund', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            (0, common_1.assertParamExists)('pGOrderFetchRefund', 'order_id', order_id);
            // verify required parameter 'refund_id' is not null or undefined
            (0, common_1.assertParamExists)('pGOrderFetchRefund', 'refund_id', refund_id);
            const localVarPath = `/orders/{order_id}/refunds/{refund_id}`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)))
                .replace(`{${"refund_id"}}`, encodeURIComponent(String(refund_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to fetch all refunds processed against an order.
         * @summary Get All Refunds for an Order
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGOrderFetchRefunds: (x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGOrderFetchRefunds', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            (0, common_1.assertParamExists)('pGOrderFetchRefunds', 'order_id', order_id);
            const localVarPath = `/orders/{order_id}/refunds`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * RefundsApi - functional programming interface
 * @export
 */
const RefundsApiFp = function (configuration) {
    const localVarAxiosParamCreator = RefundsApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to initiate refunds.
         * @summary Create Refund
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {OrderCreateRefundRequest} OrderCreateRefundRequest Request Body to Create Refunds
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGOrderCreateRefund(x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderCreateRefund(x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * Use this API to fetch a specific refund processed on your Cashfree Account.
         * @summary Get Refund
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} refund_id Refund Id of the refund you want to fetch.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGOrderFetchRefund(x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchRefund(x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * Use this API to fetch all refunds processed against an order.
         * @summary Get All Refunds for an Order
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGOrderFetchRefunds(x_api_version, order_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchRefunds(x_api_version, order_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
    };
};
/**
 * RefundsApi - object-oriented interface
 * @export
 * @class RefundsApi
 * @extends {BaseAPI}
 */
/**
 * SettlementReconciliationApi - axios parameter creator
 * @export
 */
const SettlementReconciliationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to get all settlement details by specifying the settlement ID, settlement UTR or date range.
         * @summary Get All Settlements
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {FetchSettlementsRequest} FetchSettlementsRequest Request Body to get the settlements
         * @param {string} [Content_Type] application/json
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {string} [Accept] application/json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGFetchSettlements: (x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGFetchSettlements', 'x_api_version', x_api_version);
            // verify required parameter 'FetchSettlementsRequest' is not null or undefined
            (0, common_1.assertParamExists)('pGFetchSettlements', 'FetchSettlementsRequest', FetchSettlementsRequest);
            const localVarPath = `/settlements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(FetchSettlementsRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * - Use this API to get settlement reconciliation details using Settlement ID, settlement UTR or date range. - This API will return events for the settlement IDs you want
         * @summary Settlement Reconciliation
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {SettlementFetchReconRequest} SettlementFetchReconRequest Request Body for the settlement reconciliation
         * @param {string} [Content_Type] application/json
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {string} [Accept] application/json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGSettlementFetchRecon: (x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGSettlementFetchRecon', 'x_api_version', x_api_version);
            // verify required parameter 'SettlementFetchReconRequest' is not null or undefined
            (0, common_1.assertParamExists)('pGSettlementFetchRecon', 'SettlementFetchReconRequest', SettlementFetchReconRequest);
            const localVarPath = `/settlement/recon`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(SettlementFetchReconRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SettlementReconciliationApi - functional programming interface
 * @export
 */
const SettlementReconciliationApiFp = function (configuration) {
    const localVarAxiosParamCreator = SettlementReconciliationApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to get all settlement details by specifying the settlement ID, settlement UTR or date range.
         * @summary Get All Settlements
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {FetchSettlementsRequest} FetchSettlementsRequest Request Body to get the settlements
         * @param {string} [Content_Type] application/json
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {string} [Accept] application/json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGFetchSettlements(x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchSettlements(x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * - Use this API to get settlement reconciliation details using Settlement ID, settlement UTR or date range. - This API will return events for the settlement IDs you want
         * @summary Settlement Reconciliation
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {SettlementFetchReconRequest} SettlementFetchReconRequest Request Body for the settlement reconciliation
         * @param {string} [Content_Type] application/json
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {string} [Accept] application/json
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGSettlementFetchRecon(x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGSettlementFetchRecon(x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
    };
};
/**
 * SettlementReconciliationApi - object-oriented interface
 * @export
 * @class SettlementReconciliationApi
 * @extends {BaseAPI}
 */
/**
 * SettlementsApi - axios parameter creator
 * @export
 */
const SettlementsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to view all the settlements of a particular order.
         * @summary Get Settlements by Order ID
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        pGOrderFetchSettlement: (x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGOrderFetchSettlement', 'x_api_version', x_api_version);
            // verify required parameter 'order_id' is not null or undefined
            (0, common_1.assertParamExists)('pGOrderFetchSettlement', 'order_id', order_id);
            const localVarPath = `/orders/{order_id}/settlements`
                .replace(`{${"order_id"}}`, encodeURIComponent(String(order_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SettlementsApi - functional programming interface
 * @export
 */
const SettlementsApiFp = function (configuration) {
    const localVarAxiosParamCreator = SettlementsApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to view all the settlements of a particular order.
         * @summary Get Settlements by Order ID
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} order_id The id which uniquely identifies your order
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGOrderFetchSettlement(x_api_version, order_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchSettlement(x_api_version, order_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
    };
};
/**
 * SettlementsApi - object-oriented interface
 * @export
 * @class SettlementsApi
 * @extends {BaseAPI}
 */
/**
 * SoftPOSApi - axios parameter creator
 * @export
 */
const SoftPOSApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to create new terminals to use softPOS.
         * @summary Create Terminal
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateTerminalRequest} CreateTerminalRequest Request Body to Create Terminal for SPOS
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        sposCreateTerminal: (x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('sposCreateTerminal', 'x_api_version', x_api_version);
            // verify required parameter 'CreateTerminalRequest' is not null or undefined
            (0, common_1.assertParamExists)('sposCreateTerminal', 'CreateTerminalRequest', CreateTerminalRequest);
            const localVarPath = `/terminal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(CreateTerminalRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to create a new terminal transaction. To use this API you should first create an order using the Create Order API. Also, you need to enter the terminal details while creating the order and pass the same terminal information while creating a transaction using the below mentioned API.
         * @summary Create Terminal Transaction
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateTerminalTransactionRequest} CreateTerminalTransactionRequest Request body to create a terminal transaction
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        sposCreateTerminalTransaction: (x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('sposCreateTerminalTransaction', 'x_api_version', x_api_version);
            // verify required parameter 'CreateTerminalTransactionRequest' is not null or undefined
            (0, common_1.assertParamExists)('sposCreateTerminalTransaction', 'CreateTerminalTransactionRequest', CreateTerminalTransactionRequest);
            const localVarPath = `/terminal/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(CreateTerminalTransactionRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to view all details of a terminal.
         * @summary Get Terminal Status using Phone Number
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} terminal_phone_no The terminal for which you want to view the order details.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_idempotency_key?: string,
         */
        sposFetchTerminal: (x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('sposFetchTerminal', 'x_api_version', x_api_version);
            // verify required parameter 'terminal_phone_no' is not null or undefined
            (0, common_1.assertParamExists)('sposFetchTerminal', 'terminal_phone_no', terminal_phone_no);
            const localVarPath = `/terminal/{terminal_phone_no}`
                .replace(`{${"terminal_phone_no"}}`, encodeURIComponent(String(terminal_phone_no)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * You can fetch all the StaticQRs corresponding to given terminal id or phone number. Provide either the terminal_phone_no or terminal_id in the request.
         * @summary Fetch Terminal QR Codes
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} terminal_phone_no Phone number assigned to the terminal. Required if you are not providing the cf_terminal_id in the request.
         * @param {string} cf_terminal_id Cashfree terminal id for which you want to get staticQRs. Required if you are not providing the terminal_phone_number in the request.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        sposFetchTerminalQRCodes: (x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('sposFetchTerminalQRCodes', 'x_api_version', x_api_version);
            // verify required parameter 'terminal_phone_no' is not null or undefined
            (0, common_1.assertParamExists)('sposFetchTerminalQRCodes', 'terminal_phone_no', terminal_phone_no);
            // verify required parameter 'cf_terminal_id' is not null or undefined
            (0, common_1.assertParamExists)('sposFetchTerminalQRCodes', 'cf_terminal_id', cf_terminal_id);
            const localVarPath = `/terminal/qrcodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            if (terminal_phone_no !== undefined) {
                localVarQueryParameter['terminal_phone_no'] = terminal_phone_no;
            }
            if (cf_terminal_id !== undefined) {
                localVarQueryParameter['cf_terminal_id'] = cf_terminal_id;
            }
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to update the terminal details. Email, Phone Number, and Terminal Meta are updatable for \"Storefront\". Only account status change is possible in case of \"Agent\".
         * @summary Update Terminal
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
         * @param {UpdateTerminalRequest} UpdateTerminalRequest Request Body to update terminal for SPOS.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        sposUpdateTerminal: (x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('sposUpdateTerminal', 'x_api_version', x_api_version);
            // verify required parameter 'cf_terminal_id' is not null or undefined
            (0, common_1.assertParamExists)('sposUpdateTerminal', 'cf_terminal_id', cf_terminal_id);
            // verify required parameter 'UpdateTerminalRequest' is not null or undefined
            (0, common_1.assertParamExists)('sposUpdateTerminal', 'UpdateTerminalRequest', UpdateTerminalRequest);
            const localVarPath = `/terminal/{cf_terminal_id}`
                .replace(`{${"cf_terminal_id"}}`, encodeURIComponent(String(cf_terminal_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(UpdateTerminalRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to update the terminal status.
         * @summary Update Terminal Sttus
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
         * @param {UpdateTerminalStatusRequest} UpdateTerminalStatusRequest Request Body to update terminal status for SPOS.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        sposUpdateTerminalStatus: (x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('sposUpdateTerminalStatus', 'x_api_version', x_api_version);
            // verify required parameter 'cf_terminal_id' is not null or undefined
            (0, common_1.assertParamExists)('sposUpdateTerminalStatus', 'cf_terminal_id', cf_terminal_id);
            // verify required parameter 'UpdateTerminalStatusRequest' is not null or undefined
            (0, common_1.assertParamExists)('sposUpdateTerminalStatus', 'UpdateTerminalStatusRequest', UpdateTerminalStatusRequest);
            const localVarPath = `/terminal/{cf_terminal_id}/status`
                .replace(`{${"cf_terminal_id"}}`, encodeURIComponent(String(cf_terminal_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(UpdateTerminalStatusRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to upload the terminal documents.
         * @summary Upload Terminal Docs
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
         * @param {UploadTerminalDocs} UploadTerminalDocs Request Body to update terminal documents for SPOS.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        sposUploadTerminalDocs: (x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('sposUploadTerminalDocs', 'x_api_version', x_api_version);
            // verify required parameter 'cf_terminal_id' is not null or undefined
            (0, common_1.assertParamExists)('sposUploadTerminalDocs', 'cf_terminal_id', cf_terminal_id);
            // verify required parameter 'UploadTerminalDocs' is not null or undefined
            (0, common_1.assertParamExists)('sposUploadTerminalDocs', 'UploadTerminalDocs', UploadTerminalDocs);
            const localVarPath = `/terminal/{cf_terminal_id}/docs`
                .replace(`{${"cf_terminal_id"}}`, encodeURIComponent(String(cf_terminal_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(UploadTerminalDocs, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * SoftPOSApi - functional programming interface
 * @export
 */
const SoftPOSApiFp = function (configuration) {
    const localVarAxiosParamCreator = SoftPOSApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to create new terminals to use softPOS.
         * @summary Create Terminal
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateTerminalRequest} CreateTerminalRequest Request Body to Create Terminal for SPOS
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sposCreateTerminal(x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposCreateTerminal(x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * Use this API to create a new terminal transaction. To use this API you should first create an order using the Create Order API. Also, you need to enter the terminal details while creating the order and pass the same terminal information while creating a transaction using the below mentioned API.
         * @summary Create Terminal Transaction
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {CreateTerminalTransactionRequest} CreateTerminalTransactionRequest Request body to create a terminal transaction
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sposCreateTerminalTransaction(x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposCreateTerminalTransaction(x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * Use this API to view all details of a terminal.
         * @summary Get Terminal Status using Phone Number
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} terminal_phone_no The terminal for which you want to view the order details.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sposFetchTerminal(x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposFetchTerminal(x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * You can fetch all the StaticQRs corresponding to given terminal id or phone number. Provide either the terminal_phone_no or terminal_id in the request.
         * @summary Fetch Terminal QR Codes
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} terminal_phone_no Phone number assigned to the terminal. Required if you are not providing the cf_terminal_id in the request.
         * @param {string} cf_terminal_id Cashfree terminal id for which you want to get staticQRs. Required if you are not providing the terminal_phone_number in the request.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sposFetchTerminalQRCodes(x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposFetchTerminalQRCodes(x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * Use this API to update the terminal details. Email, Phone Number, and Terminal Meta are updatable for \"Storefront\". Only account status change is possible in case of \"Agent\".
         * @summary Update Terminal
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
         * @param {UpdateTerminalRequest} UpdateTerminalRequest Request Body to update terminal for SPOS.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sposUpdateTerminal(x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposUpdateTerminal(x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * Use this API to update the terminal status.
         * @summary Update Terminal Sttus
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
         * @param {UpdateTerminalStatusRequest} UpdateTerminalStatusRequest Request Body to update terminal status for SPOS.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sposUpdateTerminalStatus(x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposUpdateTerminalStatus(x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * Use this API to upload the terminal documents.
         * @summary Upload Terminal Docs
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
         * @param {UploadTerminalDocs} UploadTerminalDocs Request Body to update terminal documents for SPOS.
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sposUploadTerminalDocs(x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposUploadTerminalDocs(x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
    };
};
/**
 * SoftPOSApi - object-oriented interface
 * @export
 * @class SoftPOSApi
 * @extends {BaseAPI}
 */
/**
 * TokenVaultApi - axios parameter creator
 * @export
 */
const TokenVaultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Use this API to delete a saved card instrument for a customer_id and instrument_id
         * @summary Delete Saved Card Instrument
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
         * @param {string} instrument_id The instrument_id which needs to be deleted
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGCustomerDeleteInstrument: (x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGCustomerDeleteInstrument', 'x_api_version', x_api_version);
            // verify required parameter 'customer_id' is not null or undefined
            (0, common_1.assertParamExists)('pGCustomerDeleteInstrument', 'customer_id', customer_id);
            // verify required parameter 'instrument_id' is not null or undefined
            (0, common_1.assertParamExists)('pGCustomerDeleteInstrument', 'instrument_id', instrument_id);
            const localVarPath = `/customers/{customer_id}/instruments/{instrument_id}`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customer_id)))
                .replace(`{${"instrument_id"}}`, encodeURIComponent(String(instrument_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to fetch a single specific saved card for a customer_id by it\'s instrument_id
         * @summary Fetch Specific Saved Card Instrument
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
         * @param {string} instrument_id The instrument_id of the saved instrument which needs to be queried
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGCustomerFetchInstrument: (x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGCustomerFetchInstrument', 'x_api_version', x_api_version);
            // verify required parameter 'customer_id' is not null or undefined
            (0, common_1.assertParamExists)('pGCustomerFetchInstrument', 'customer_id', customer_id);
            // verify required parameter 'instrument_id' is not null or undefined
            (0, common_1.assertParamExists)('pGCustomerFetchInstrument', 'instrument_id', instrument_id);
            const localVarPath = `/customers/{customer_id}/instruments/{instrument_id}`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customer_id)))
                .replace(`{${"instrument_id"}}`, encodeURIComponent(String(instrument_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API to fetch saved cards for a customer_id
         * @summary Fetch All Saved Card Instrument
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
         * @param {PGCustomerFetchInstrumentsInstrumentTypeEnum} instrument_type Payment mode or type of saved instrument
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGCustomerFetchInstruments: (x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGCustomerFetchInstruments', 'x_api_version', x_api_version);
            // verify required parameter 'customer_id' is not null or undefined
            (0, common_1.assertParamExists)('pGCustomerFetchInstruments', 'customer_id', customer_id);
            // verify required parameter 'instrument_type' is not null or undefined
            (0, common_1.assertParamExists)('pGCustomerFetchInstruments', 'instrument_type', instrument_type);
            const localVarPath = `/customers/{customer_id}/instruments`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customer_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            if (instrument_type !== undefined) {
                localVarQueryParameter['instrument_type'] = instrument_type;
            }
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Use this API To get the card network token, token expiry and cryptogram for a saved card instrument using instrument id
         * @summary Fetch cryptogram for a saved card instrument
         
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
         * @param {string} instrument_id The instrument_id of the saved card instrument which needs to be queried
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * x_request_id?: string,
         */
        pGCustomerInstrumentsFetchCryptogram: (x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'x_api_version' is not null or undefined
            (0, common_1.assertParamExists)('pGCustomerInstrumentsFetchCryptogram', 'x_api_version', x_api_version);
            // verify required parameter 'customer_id' is not null or undefined
            (0, common_1.assertParamExists)('pGCustomerInstrumentsFetchCryptogram', 'customer_id', customer_id);
            // verify required parameter 'instrument_id' is not null or undefined
            (0, common_1.assertParamExists)('pGCustomerInstrumentsFetchCryptogram', 'instrument_id', instrument_id);
            const localVarPath = `/customers/{customer_id}/instruments/{instrument_id}/cryptogram`
                .replace(`{${"customer_id"}}`, encodeURIComponent(String(customer_id)))
                .replace(`{${"instrument_id"}}`, encodeURIComponent(String(instrument_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            var url = "https://sandbox.cashfree.com/pg";
            if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                url = "https://api.cashfree.com/pg";
            }
            const localVarUrlObj = new URL(localVarPath, url);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication XPartnerAPIKey required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-apikey");
            // authentication XClientSecret required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-secret");
            // authentication XPartnerMerchantID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-partner-merchantid");
            // authentication XClientID required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-id");
            // authentication XClientSignatureHeader required
            yield (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-client-signature");
            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.0.7';
            if (x_api_version != null && x_api_version != undefined) {
                localVarHeaderParameter['x-api-version'] = x_api_version;
            }
            if (x_request_id != null && x_request_id != undefined) {
                localVarHeaderParameter['x-request-id'] = x_request_id;
            }
            if (x_idempotency_key != null && x_idempotency_key != undefined) {
                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
/**
 * TokenVaultApi - functional programming interface
 * @export
 */
const TokenVaultApiFp = function (configuration) {
    const localVarAxiosParamCreator = TokenVaultApiAxiosParamCreator(configuration);
    return {
        /**
         * Use this API to delete a saved card instrument for a customer_id and instrument_id
         * @summary Delete Saved Card Instrument
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
         * @param {string} instrument_id The instrument_id which needs to be deleted
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGCustomerDeleteInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCustomerDeleteInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * Use this API to fetch a single specific saved card for a customer_id by it\'s instrument_id
         * @summary Fetch Specific Saved Card Instrument
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
         * @param {string} instrument_id The instrument_id of the saved instrument which needs to be queried
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGCustomerFetchInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCustomerFetchInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * Use this API to fetch saved cards for a customer_id
         * @summary Fetch All Saved Card Instrument
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
         * @param {PGCustomerFetchInstrumentsInstrumentTypeEnum} instrument_type Payment mode or type of saved instrument
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGCustomerFetchInstruments(x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCustomerFetchInstruments(x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
        /**
         * Use this API To get the card network token, token expiry and cryptogram for a saved card instrument using instrument id
         * @summary Fetch cryptogram for a saved card instrument
         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
         * @param {string} instrument_id The instrument_id of the saved card instrument which needs to be queried
         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pGCustomerInstrumentsFetchCryptogram(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCustomerInstrumentsFetchCryptogram(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options);
                var url = "https://sandbox.cashfree.com/pg";
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.PRODUCTION) {
                    url = "https://api.cashfree.com/pg";
                }
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, url, configuration);
            });
        },
    };
};
/**
 * TokenVaultApi - object-oriented interface
 * @export
 * @class TokenVaultApi
 * @extends {BaseAPI}
 */
/**
 * @export
 */
exports.PGCustomerFetchInstrumentsInstrumentTypeEnum = {
    CARD: 'card',
    UNKNOWN_DEFAULT_OPEN_API: '11184809'
};
class Environment {
    constructor() {
        this.PRODUCTION = configuration_1.CFEnvironment.PRODUCTION;
        this.SANDBOX = configuration_1.CFEnvironment.SANDBOX;
    }
}
class PGWebhookEvent {
    constructor(type, rawBody, object) {
        this.type = type;
        this.raw = rawBody;
        this.object = object;
    }
}
exports.PGWebhookEvent = PGWebhookEvent;
class Cashfree {
    /**
     * Use this API to verify your webhook signature once you receive from Cashfree's server.
     * @summary Verify Webhook Signatures
     * @param {string} signature that is present in the header of the webhook ("x-webhook-signature")
     * @param {string} rawBody is the entire body sent to the server in string format
     * @param {string} timestamp that is present in the header of the webhook ("x-webhook-timestamp")
     * @throws {Error}
     */
    static PGVerifyWebhookSignature(signature, rawBody, timestamp) {
        const body = timestamp + rawBody;
        const secretKey = Cashfree.XClientSecret;
        let generatedSignature = crypto.createHmac('sha256', secretKey).update(body).digest("base64");
        if (generatedSignature === signature) {
            let jsonObject = JSON.parse(rawBody);
            return new PGWebhookEvent(jsonObject.type, rawBody, jsonObject);
        }
        throw new Error("Generated signature and received signature did not match.");
    }
    /**
     * Create Customer at Cashfree
     * @summary Create Customer at Cashfree
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {CreateCustomerRequest} CreateCustomerRequest Request to create a new customer at Cashfree
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomersApi
     */
    static PGCreateCustomer(x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return CustomersApiFp().pGCreateCustomer(x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get eligible Cardless EMI Payment Methods available for a customer on an order basis their phone number.
     * @summary Get Eligible Cardless EMI Payment Methods for a customer on an order
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {EligibilityFetchCardlessEMIRequest} EligibilityFetchCardlessEMIRequest Request Body to get eligible cardless emi options for a customer and order
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EligibilityApi
     */
    static PGEligibilityFetchCardlessEMI(x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return EligibilityApiFp().pGEligibilityFetchCardlessEMI(x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get eligible offers for an order_id or order amount.
     * @summary Get Eligible Offers for an Order
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {EligibilityFetchOffersRequest} EligibilityFetchOffersRequest Request Body to get eligible offers for a customer and order
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EligibilityApi
     */
    static PGEligibilityFetchOffers(x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return EligibilityApiFp().pGEligibilityFetchOffers(x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get eligible Paylater Payment Methods for a customer on an order.
     * @summary Get Eligible Paylater for a customer on an order
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {EligibilityFetchPaylaterRequest} EligibilityFetchPaylaterRequest Request Body to get eligible paylater options for a customer and order
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EligibilityApi
     */
    static PGEligibilityFetchPaylater(x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return EligibilityApiFp().pGEligibilityFetchPaylater(x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get eligible Payment Methods
     * @summary Get eligible Payment Methods
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {EligibilityFetchPaymentMethodsRequest} EligibilityFetchPaymentMethodsRequest Request Body to get eligible payment methods for an account and order
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EligibilityApi
     */
    static PGEligibilityFetchPaymentMethods(x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return EligibilityApiFp().pGEligibilityFetchPaymentMethods(x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to create offers with Cashfree from your backend
     * @summary Create Offer
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {CreateOfferRequest} CreateOfferRequest Request body to create an offer at Cashfree
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    static PGCreateOffer(x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return OffersApiFp().pGCreateOffer(x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get offer by offer_id
     * @summary Get Offer by ID
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} offer_id The offer ID for which you want to view the offer details.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    static PGFetchOffer(x_api_version, offer_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return OffersApiFp().pGFetchOffer(x_api_version, offer_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * ### Order An order is an entity which has a amount and currency associated with it. It is something for which you want to collect payment for. Use this API to create orders with Cashfree from your backend to get a `payment_sessions_id`.  You can use the `payment_sessions_id` to create a transaction for the order.
     * @summary Create Order
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {CreateOrderRequest} CreateOrderRequest Request body to create an order at cashfree
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    static PGCreateOrder(x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return OrdersApiFp().pGCreateOrder(x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to fetch the order that was created at Cashfree\'s using the `order_id`.  ## When to use this API - To check the status of your order - Once the order is PAID - Once your customer returns to `return_url`
     * @summary Get Order
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id The id which uniquely identifies your order
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    static PGFetchOrder(x_api_version, order_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return OrdersApiFp().pGFetchOrder(x_api_version, order_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to terminate the order that was created at Cashfree\'s using the `order_id`.
     * @summary Terminate Order
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id The id which uniquely identifies your order
     * @param {TerminateOrderRequest} TerminateOrderRequest Request body to terminate an order at cashfree
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    static PGTerminateOrder(x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return OrdersApiFp().pGTerminateOrder(x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * - Use this API to get the payment gateway reconciliation details with date range. - It will have events for your payment account
     * @summary PG Reconciliation
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {FetchReconRequest} FetchReconRequest Request Body for the reconciliation
     * @param {string} [Content_Type] application/json
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {string} [Accept] application/json
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PGReconciliationApi
     */
    static PGFetchRecon(x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return PGReconciliationApiFp().pGFetchRecon(x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to cancel a payment link. No further payments can be done against a cancelled link. Only a link in ACTIVE status can be cancelled.
     * @summary Cancel Payment Link
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} link_id The payment link ID for which you want to view the details.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentLinksApi
     */
    static PGCancelLink(x_api_version, link_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return PaymentLinksApiFp().pGCancelLink(x_api_version, link_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to create a new payment link. The created payment link url will be available in the API response parameter link_url.
     * @summary Create Payment Link
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {CreateLinkRequest} CreateLinkRequest Request Body to Create Payment Links
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentLinksApi
     */
    static PGCreateLink(x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return PaymentLinksApiFp().pGCreateLink(x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to view all details and status of a payment link.
     * @summary Fetch Payment Link Details
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} link_id The payment link ID for which you want to view the details.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentLinksApi
     */
    static PGFetchLink(x_api_version, link_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return PaymentLinksApiFp().pGFetchLink(x_api_version, link_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to view all order details for a payment link.
     * @summary Get Orders for a Payment Link
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} link_id The payment link ID for which you want to view the details.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentLinksApi
     */
    static PGLinkFetchOrders(x_api_version, link_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return PaymentLinksApiFp().pGLinkFetchOrders(x_api_version, link_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to capture or void a preauthorized payment
     * @summary Preauthorization
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id The id which uniquely identifies your order
     * @param {AuthorizeOrderRequest} AuthorizeOrderRequest Request to Capture or Void Transactions
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    static PGAuthorizeOrder(x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return PaymentsApiFp().pGAuthorizeOrder(x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * If you accept OTP on your own page, you can use the below API to send OTP to Cashfree.
     * @summary Submit or Resend OTP
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} cf_payment_id The Cashfree payment or transaction ID.
     * @param {OrderAuthenticatePaymentRequest} OrderAuthenticatePaymentRequest Request body to submit/resend headless OTP. To use this API make sure you have headless OTP enabled for your account
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    static PGOrderAuthenticatePayment(x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return PaymentsApiFp().pGOrderAuthenticatePayment(x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to view payment details of an order for a payment ID.
     * @summary Get Payment by ID
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id The id which uniquely identifies your order
     * @param {string} cf_payment_id The Cashfree payment or transaction ID.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    static PGOrderFetchPayment(x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return PaymentsApiFp().pGOrderFetchPayment(x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to view all payment details for an order.
     * @summary Get Payments for an Order
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id The id which uniquely identifies your order
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    static PGOrderFetchPayments(x_api_version, order_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return PaymentsApiFp().pGOrderFetchPayments(x_api_version, order_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API when you have already created the orders and want Cashfree to process the payment. To use this API S2S flag needs to be enabled from the backend. In case you want to use the cards payment option the PCI DSS flag is required, for more information send an email to \"care@cashfree.com\".
     * @summary Order Pay
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {PayOrderRequest} PayOrderRequest Request body to create a transaction at cashfree using &#x60;payment_session_id&#x60;
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsApi
     */
    static PGPayOrder(x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return PaymentsApiFp().pGPayOrder(x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to initiate refunds.
     * @summary Create Refund
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id The id which uniquely identifies your order
     * @param {OrderCreateRefundRequest} OrderCreateRefundRequest Request Body to Create Refunds
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundsApi
     */
    static PGOrderCreateRefund(x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return RefundsApiFp().pGOrderCreateRefund(x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to fetch a specific refund processed on your Cashfree Account.
     * @summary Get Refund
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id The id which uniquely identifies your order
     * @param {string} refund_id Refund Id of the refund you want to fetch.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundsApi
     */
    static PGOrderFetchRefund(x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return RefundsApiFp().pGOrderFetchRefund(x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to fetch all refunds processed against an order.
     * @summary Get All Refunds for an Order
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id The id which uniquely identifies your order
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundsApi
     */
    static PGOrderFetchRefunds(x_api_version, order_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return RefundsApiFp().pGOrderFetchRefunds(x_api_version, order_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to get all settlement details by specifying the settlement ID, settlement UTR or date range.
     * @summary Get All Settlements
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {FetchSettlementsRequest} FetchSettlementsRequest Request Body to get the settlements
     * @param {string} [Content_Type] application/json
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {string} [Accept] application/json
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettlementReconciliationApi
     */
    static PGFetchSettlements(x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return SettlementReconciliationApiFp().pGFetchSettlements(x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * - Use this API to get settlement reconciliation details using Settlement ID, settlement UTR or date range. - This API will return events for the settlement IDs you want
     * @summary Settlement Reconciliation
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {SettlementFetchReconRequest} SettlementFetchReconRequest Request Body for the settlement reconciliation
     * @param {string} [Content_Type] application/json
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {string} [Accept] application/json
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettlementReconciliationApi
     */
    static PGSettlementFetchRecon(x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return SettlementReconciliationApiFp().pGSettlementFetchRecon(x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to view all the settlements of a particular order.
     * @summary Get Settlements by Order ID
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} order_id The id which uniquely identifies your order
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettlementsApi
     */
    static PGOrderFetchSettlement(x_api_version, order_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return SettlementsApiFp().pGOrderFetchSettlement(x_api_version, order_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to create new terminals to use softPOS.
     * @summary Create Terminal
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {CreateTerminalRequest} CreateTerminalRequest Request Body to Create Terminal for SPOS
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftPOSApi
     */
    static SposCreateTerminal(x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return SoftPOSApiFp().sposCreateTerminal(x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to create a new terminal transaction. To use this API you should first create an order using the Create Order API. Also, you need to enter the terminal details while creating the order and pass the same terminal information while creating a transaction using the below mentioned API.
     * @summary Create Terminal Transaction
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {CreateTerminalTransactionRequest} CreateTerminalTransactionRequest Request body to create a terminal transaction
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftPOSApi
     */
    static SposCreateTerminalTransaction(x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return SoftPOSApiFp().sposCreateTerminalTransaction(x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to view all details of a terminal.
     * @summary Get Terminal Status using Phone Number
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} terminal_phone_no The terminal for which you want to view the order details.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftPOSApi
     */
    static SposFetchTerminal(x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return SoftPOSApiFp().sposFetchTerminal(x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * You can fetch all the StaticQRs corresponding to given terminal id or phone number. Provide either the terminal_phone_no or terminal_id in the request.
     * @summary Fetch Terminal QR Codes
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} terminal_phone_no Phone number assigned to the terminal. Required if you are not providing the cf_terminal_id in the request.
     * @param {string} cf_terminal_id Cashfree terminal id for which you want to get staticQRs. Required if you are not providing the terminal_phone_number in the request.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftPOSApi
     */
    static SposFetchTerminalQRCodes(x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return SoftPOSApiFp().sposFetchTerminalQRCodes(x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to update the terminal details. Email, Phone Number, and Terminal Meta are updatable for \"Storefront\". Only account status change is possible in case of \"Agent\".
     * @summary Update Terminal
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
     * @param {UpdateTerminalRequest} UpdateTerminalRequest Request Body to update terminal for SPOS.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftPOSApi
     */
    static SposUpdateTerminal(x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return SoftPOSApiFp().sposUpdateTerminal(x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to update the terminal status.
     * @summary Update Terminal Sttus
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
     * @param {UpdateTerminalStatusRequest} UpdateTerminalStatusRequest Request Body to update terminal status for SPOS.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftPOSApi
     */
    static SposUpdateTerminalStatus(x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return SoftPOSApiFp().sposUpdateTerminalStatus(x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to upload the terminal documents.
     * @summary Upload Terminal Docs
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.
     * @param {UploadTerminalDocs} UploadTerminalDocs Request Body to update terminal documents for SPOS.
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SoftPOSApi
     */
    static SposUploadTerminalDocs(x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return SoftPOSApiFp().sposUploadTerminalDocs(x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to delete a saved card instrument for a customer_id and instrument_id
     * @summary Delete Saved Card Instrument
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
     * @param {string} instrument_id The instrument_id which needs to be deleted
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenVaultApi
     */
    static PGCustomerDeleteInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return TokenVaultApiFp().pGCustomerDeleteInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to fetch a single specific saved card for a customer_id by it\'s instrument_id
     * @summary Fetch Specific Saved Card Instrument
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
     * @param {string} instrument_id The instrument_id of the saved instrument which needs to be queried
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenVaultApi
     */
    static PGCustomerFetchInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return TokenVaultApiFp().pGCustomerFetchInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API to fetch saved cards for a customer_id
     * @summary Fetch All Saved Card Instrument
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
     * @param {PGCustomerFetchInstrumentsInstrumentTypeEnum} instrument_type Payment mode or type of saved instrument
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenVaultApi
     */
    static PGCustomerFetchInstruments(x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return TokenVaultApiFp().pGCustomerFetchInstruments(x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
    /**
     * Use this API To get the card network token, token expiry and cryptogram for a saved card instrument using instrument id
     * @summary Fetch cryptogram for a saved card instrument
     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD
     * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;
     * @param {string} instrument_id The instrument_id of the saved card instrument which needs to be queried
     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree
     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenVaultApi
     */
    static PGCustomerInstrumentsFetchCryptogram(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {
        if (Cashfree.XEnableErrorAnalytics) {
            Sentry.init({
                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',
                // Performance Monitoring
                tracesSampleRate: 1.0,
                // Set sampling rate for profiling - this is relative to tracesSampleRate
                profilesSampleRate: 1.0,
                attachStacktrace: true,
                enableTracing: true,
                beforeSend: (event) => {
                    delete event.contexts.os;
                    delete event.contexts.device;
                    delete event.server_name;
                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {
                        const stackTrace = event.exception.values[0].stacktrace;
                        if (stackTrace && stackTrace.frames) {
                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes("cashfree-pg")).map((x) => x.filename);
                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes("cashfree-pg")) {
                                if (Cashfree.XEnableErrorAnalytics) {
                                    return event;
                                }
                                return null;
                            }
                        }
                    }
                    return null;
                },
            });
            Sentry.configureScope((scope) => {
                if (Cashfree.XEnvironment == configuration_1.CFEnvironment.SANDBOX) {
                    scope.setExtra('environment', 'sandbox');
                }
                else {
                    scope.setExtra('environment', 'production');
                }
                scope.setExtra('release', "4.0.7");
            });
        }
        try {
            return TokenVaultApiFp().pGCustomerInstrumentsFetchCryptogram(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));
        }
        catch (error) {
            if (Cashfree.XEnableErrorAnalytics) {
                Sentry.captureException(error);
            }
            throw error;
        }
    }
}
exports.Cashfree = Cashfree;
Cashfree.XEnableErrorAnalytics = true;
Cashfree.XApiVersion = "2023-08-01";
Cashfree.Environment = new Environment();
